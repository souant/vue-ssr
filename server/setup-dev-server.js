const fs = require("fs");
const path = require("path");
const MFS = require("memory-fs");
const webpack = require("webpack");
const chokidar = require("chokidar");
const WebpackBar = require("webpackbar");

// 获取webpack.client.config
function getCilentWebpackConfig() {
  // 置空
  process.VUE_CLI_SERVICE = null;
  // 设置环境变量
  process.env.TARGET_ENV = "web";
  const configCilent = require("@vue/cli-service/webpack.config.js");
  return configCilent;
}
const clientConfig = getCilentWebpackConfig();

// 获取webpack.server.config
function getServerWebpackConfig() {
  // 删除reuqire缓存
  delete require.cache[require.resolve("@vue/cli-service/webpack.config.js")];
  delete require.cache[
    require.resolve(path.resolve(__dirname, "../vue.config.js"))
  ];
  // 置空
  process.VUE_CLI_SERVICE = null;
  // 设置环境变量
  process.env.TARGET_ENV = "node";
  const configServer = require("@vue/cli-service/webpack.config.js");
  return configServer;
}
const serverConfig = getServerWebpackConfig();

// 读取文件
const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), "utf-8");
  } catch (e) {
    console.log(e);
  }
};

module.exports = function setupDevServer(app, templatePath, cb) {
  let bundle;
  let template;
  let clientManifest;

  let ready;
  const readyPromise = new Promise((r) => {
    ready = r;
  });
  const update = () => {
    if (bundle && clientManifest) {
      ready();
      cb(bundle, {
        template,
        clientManifest,
      });
    }
  };

  // read template from disk and watch
  template = fs.readFileSync(templatePath, "utf-8");
  chokidar.watch(templatePath).on("change", () => {
    template = fs.readFileSync(templatePath, "utf-8");
    console.log("index.html template updated.");
    update();
  });

  // modify client config to work with hot middleware
  clientConfig.entry = ["webpack-hot-middleware/client", clientConfig.entry];
  clientConfig.output.filename = "[name].js";
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin(),
    new WebpackBar({
      name: "client",
      color: "#85d", // 默认green，进度条颜色支持HEX
      basic: false, // 默认true，启用一个简单的日志报告器
      profile: false, // 默认false，启用探查器。
    })
  );

  // dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = require("webpack-dev-middleware")(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
  });
  app.use(devMiddleware);
  // TypeError: clientCompiler.plugin is not a function
  // webpack 5 删除了clientCompiler.plugin
  // clientCompiler.plugin("done", (stats) => {
  // stats = stats.toJson();
  // stats.errors.forEach((err) => console.error(err));
  // stats.warnings.forEach((err) => console.warn(err));
  // if (stats.errors.length) return;
  // clientManifest = JSON.parse(
  //   readFile(devMiddleware.fileSystem, "vue-ssr-client-manifest.json")
  // );
  //
  // update();
  // });
  clientCompiler.hooks.done.tap(
    { name: "get-vue-ssr-client-manifest" },
    function (stats) {
      stats = stats.toJson();
      stats.errors.forEach((err) => console.error(err));
      stats.warnings.forEach((err) => console.warn(err));
      if (stats.errors.length) return;
      clientManifest = JSON.parse(
        readFile(
          devMiddleware.context.outputFileSystem,
          "vue-ssr-client-manifest.json"
        )
      );

      update();
    }
  );

  // hot middleware
  app.use(
    require("webpack-hot-middleware")(clientCompiler, {
      heartbeat: 5000,
      log: false,
    })
  );

  // watch and update server renderer

  serverConfig.plugins.push(
    new webpack.NoEmitOnErrorsPlugin(),
    new WebpackBar({
      name: "server",
      color: "#2c3", // 默认green，进度条颜色支持HEX
      basic: false, // 默认true，启用一个简单的日志报告器
      profile: false, // 默认false，启用探查器。
    })
  );

  const serverCompiler = webpack(serverConfig);

  const mfs = new MFS();
  serverCompiler.outputFileSystem = mfs;

  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err;
    stats = stats.toJson();
    if (stats.errors.length) return;
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, "vue-ssr-server-bundle.json"));
    update();
  });

  return readyPromise;
};
